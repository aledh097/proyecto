
================================================
GIT
================================================

[Working Area] <----> [Staging Area] <----> [Repository]

01)  # Configuraciones iniciales
    git config --global user.email "ivanrguez1@yahoo.es"
    git config --global user.name "ivanrguez1"


02) mkdir ~/Documentos/Aareon/Pruebas-GIT/       # Crear directorio
03) cd ~/Documentos/Aareon/Pruebas-GIT/
04) git init                                     # Crear repositorio
05) nano archivo1.txt                            # Creamos un archivo
    -> Dentro escribimos: Hola Mundo
    
06) git status                                   # Estado repositorio
07) git add .                                    # Añade Cambios y nuevos archivos, NO los eliminados
    -> Alternativas:
        git add <archivo>                       # Archivo individual
        git add <carpeta>                       # Añade una carpeta completa
        git add *.md                            # Añade archivos Markdown (https://es.wikipedia.org/wiki/Markdown)
        git add -A                              # Añadimos al Staging Area TODOS los cambios (update)
        git add -u                              # Añade cambios y eliminados, pero NO los nuevos
    
07) git commit -m "Primer commit"               # Hacer commit (Una foto)
                                                # Incluye: 1-Varios Hunks (Diff), Mensaje, Hash (Identificador) y enlace con el "Commit Padre"

08) nano archivo1.txt
    -> Dentro dejamos: Hola Mundo GIT

09) commit -a -m "Segundo commit"                # Con -a evitamos poner git add (confirmando el cambio de archivo1.txt)
10) git log                                      # Historial de Git en el repositorio local (Salen los commit)
    Alternativas (mas visuales):
    git log --graph --decorate --pretty=oneline
    git reflog                  

11) # Marcha atrás:
    git reset HEAD~1                            # Deshace commits (pero archivo1.txt mantiene el cambio)
        -> Opciones:
        git reset --hard | --soft HEAD~1        # Con hard, no solo deshace el commit, si no también el cambio del archivo
        
    git reset <archivo> | <carpeta | *.md       # Deshace el añadido de un archivo, carpeta o tipo de archivos
    git checkout <archivo>                      # Deshace el archivo añadido
    git checkout <hash>                         # Deshace desde el hash indicado
    
11) git branch                                  # Ver ranas del repositorio
    NOTA: La rama actual viene con un asterisco
    
12) git branch nuevaRama                        # Crea una rama nueva rama
13) git checkout nuevaRama                      # Pasa de la rama ACTUAL a nuevaRama
    -> git checkout master                      # Vuelve a la rama Master
14) git branch -D nuevaRama                     # Elimina la rama  (CUIDADO!!)
    IMPORTANTE: No podemos eliminar la rama en la que estamos


REPOSITORIOS REMOTOS
##########################################
Recurso: https://git-scm.com/book/es/v2/Fundamentos-de-Git-Trabajar-con-Remotos

NOTA: Normalmente, el procedimiento para los repositorios es BAJARSE uno remoto y trabajar en local.
El procedimiento de CREAR EN LOCAL y CONECTARLO EN REMOTO NO ESTA RECOMENDADO!!

01) mkdir ~/Documentos/Aareon/'Repositorios GIT'                        # Creamos el directorio
02) cd ~/Documentos/Aareon/'Repositorios GIT'
03) (Github) [+] New Repository                                         # Creamos un nuevo repositorio remoto en GitHUb, ej: https://github.com/ivanrguez1/pruebaGIT
    NOTA: Dejar marcado Readme.md
04) git clone 'https://github.com/ivanrguez1/pruebaGIT'                 # Clona en el directorio actual el repositorio remoto (crear carpeta pruebaGIT)
05) cd ~/Documentos/Aareon/'Repositorios GIT'/pruebaGIT/                # MUY IMPORTANTE: Git está en pruebaGIT, NO en 'Repositorios GIT'

06) git remote add pruebaGIT 'https://github.com/ivanrguez1/pruebaGIT'  # Añade el repositorio remoto (enlaza al externo para hacer push, etc)
07) git remote -v                                                       # Ve los repositorios remotos
08) nano archivo1.txt                                                   # Creamos el archivo en local y escribimos "Hola Mundo" (sin comillas)

09) git add .                                                           # Añadimos archivos
10) git commit -m "Primer commit a Remoto"                              # Commit
11) git push pruebaGIT master                                           # Subimos commit a Repositorio Remoto (pruebaGIT) <rama>

12) (Github) Editamos README.md y añadimos una línea.                   # Ahora veremos como en Github se hace commit automático.
13) git pull pruebaGIT master                                           # Actualizamos el repositorio local con lo que hay en remoto (fetch + merge) 
14) git branch -i nuevaRama                                             # Crear rama preparándola para subirla a remoto
15) git push pruebaGIT nuevaRama                                        # Añadimos la rama en repositorio
16) git push pruebaGIT --delete nuevaRama                               # Borra la rama en remoto (CUIDADO!!)




FUSIONAR (MERGING)
##########################################
01) git branch -i otraRama                                              # Creamos la rama
02) git checkout otraRama                                               # Pasamos a la nueva Rama
03) nano archivo2.txt                                                   # Creamos un archivo
04) git add .
05) git commit -m "Primer commit a Remotoen otra Rama"  
06) git checkout master                                                 # Volvemos a master
07) git merge otraRama                                                  # Fusionamos otraRama con la rama actual (master)    
08) git reset --merge                                                   # Deshacer el merge
09) git log                                                             # Para ver el histórico de GIT en local


INSTALAR GITKRAKEN
##########################################

01) cd ~/Descargas
02) wget https://release.gitkraken.com/linux/gitkraken-amd64.deb
03) dpkg -i gitkraken-amd64.deb











